// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 6.0.22.0. www.xsd2code.com
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace Hybrasyl.Xml
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.Xml;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4161.0")]
[Serializable]
[DebuggerStepThrough]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute(Namespace="http://www.hybrasyl.com/XML/Hybrasyl/2020-02")]
public partial class StatModifiers
{
    #region Private fields
    private string _str;
    private string _int;
    private string _wis;
    private string _con;
    private string _dex;
    private string _hp;
    private string _mp;
    private string _hit;
    private string _dmg;
    private string _ac;
    private string _regen;
    private string _mr;
    private string _crit;
    private ElementType _offensiveElement;
    private ElementType _defensiveElement;
    private string _inboundDamageModifier;
    private string _outboundDamageModifier;
    private string _inboundHealModifier;
    private string _outboundHealModifier;
    private string _damageType;
    private string _reflectMagical;
    private string _reflectPhysical;
    private string _extraGold;
    private string _dodge;
    private string _extraXp;
    private string _extraItemFind;
    private string _lifeSteal;
    private string _manaSteal;
    private static XmlSerializer _serializerXml;
    #endregion
    
    public StatModifiers()
    {
        _offensiveElement = ElementType.None;
        _defensiveElement = ElementType.None;
    }
    
    [XmlAttribute]
    public string Str
    {
        get
        {
            return _str;
        }
        set
        {
            _str = value;
        }
    }
    
    [XmlAttribute]
    public string Int
    {
        get
        {
            return _int;
        }
        set
        {
            _int = value;
        }
    }
    
    [XmlAttribute]
    public string Wis
    {
        get
        {
            return _wis;
        }
        set
        {
            _wis = value;
        }
    }
    
    [XmlAttribute]
    public string Con
    {
        get
        {
            return _con;
        }
        set
        {
            _con = value;
        }
    }
    
    [XmlAttribute]
    public string Dex
    {
        get
        {
            return _dex;
        }
        set
        {
            _dex = value;
        }
    }
    
    [XmlAttribute]
    public string Hp
    {
        get
        {
            return _hp;
        }
        set
        {
            _hp = value;
        }
    }
    
    [XmlAttribute]
    public string Mp
    {
        get
        {
            return _mp;
        }
        set
        {
            _mp = value;
        }
    }
    
    [XmlAttribute]
    public string Hit
    {
        get
        {
            return _hit;
        }
        set
        {
            _hit = value;
        }
    }
    
    [XmlAttribute]
    public string Dmg
    {
        get
        {
            return _dmg;
        }
        set
        {
            _dmg = value;
        }
    }
    
    [XmlAttribute]
    public string Ac
    {
        get
        {
            return _ac;
        }
        set
        {
            _ac = value;
        }
    }
    
    [XmlAttribute]
    public string Regen
    {
        get
        {
            return _regen;
        }
        set
        {
            _regen = value;
        }
    }
    
    [XmlAttribute]
    public string Mr
    {
        get
        {
            return _mr;
        }
        set
        {
            _mr = value;
        }
    }
    
    [XmlAttribute]
    public string Crit
    {
        get
        {
            return _crit;
        }
        set
        {
            _crit = value;
        }
    }
    
    [XmlAttribute]
    [DefaultValue(ElementType.None)]
    public ElementType OffensiveElement
    {
        get
        {
            return _offensiveElement;
        }
        set
        {
            _offensiveElement = value;
        }
    }
    
    [XmlAttribute]
    [DefaultValue(ElementType.None)]
    public ElementType DefensiveElement
    {
        get
        {
            return _defensiveElement;
        }
        set
        {
            _defensiveElement = value;
        }
    }
    
    [XmlAttribute]
    public string InboundDamageModifier
    {
        get
        {
            return _inboundDamageModifier;
        }
        set
        {
            _inboundDamageModifier = value;
        }
    }
    
    [XmlAttribute]
    public string OutboundDamageModifier
    {
        get
        {
            return _outboundDamageModifier;
        }
        set
        {
            _outboundDamageModifier = value;
        }
    }
    
    [XmlAttribute]
    public string InboundHealModifier
    {
        get
        {
            return _inboundHealModifier;
        }
        set
        {
            _inboundHealModifier = value;
        }
    }
    
    [XmlAttribute]
    public string OutboundHealModifier
    {
        get
        {
            return _outboundHealModifier;
        }
        set
        {
            _outboundHealModifier = value;
        }
    }
    
    [XmlAttribute]
    public string DamageType
    {
        get
        {
            return _damageType;
        }
        set
        {
            _damageType = value;
        }
    }
    
    [XmlAttribute]
    public string ReflectMagical
    {
        get
        {
            return _reflectMagical;
        }
        set
        {
            _reflectMagical = value;
        }
    }
    
    [XmlAttribute]
    public string ReflectPhysical
    {
        get
        {
            return _reflectPhysical;
        }
        set
        {
            _reflectPhysical = value;
        }
    }
    
    [XmlAttribute]
    public string ExtraGold
    {
        get
        {
            return _extraGold;
        }
        set
        {
            _extraGold = value;
        }
    }
    
    [XmlAttribute]
    public string Dodge
    {
        get
        {
            return _dodge;
        }
        set
        {
            _dodge = value;
        }
    }
    
    [XmlAttribute]
    public string ExtraXp
    {
        get
        {
            return _extraXp;
        }
        set
        {
            _extraXp = value;
        }
    }
    
    [XmlAttribute]
    public string ExtraItemFind
    {
        get
        {
            return _extraItemFind;
        }
        set
        {
            _extraItemFind = value;
        }
    }
    
    [XmlAttribute]
    public string LifeSteal
    {
        get
        {
            return _lifeSteal;
        }
        set
        {
            _lifeSteal = value;
        }
    }
    
    [XmlAttribute]
    public string ManaSteal
    {
        get
        {
            return _manaSteal;
        }
        set
        {
            _manaSteal = value;
        }
    }
    
    private static XmlSerializer SerializerXml
    {
        get
        {
            if ((_serializerXml == null))
            {
                _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(StatModifiers));
            }
            return _serializerXml;
        }
    }
    
    #region Serialize/Deserialize
    /// <summary>
    /// Serialize StatModifiers object
    /// </summary>
    /// <returns>XML value</returns>
    public virtual string Serialize()
    {
        StreamReader streamReader = null;
        MemoryStream memoryStream = null;
        try
        {
            memoryStream = new MemoryStream();
            System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
            xmlWriterSettings.Indent = true;
            xmlWriterSettings.IndentChars = "  ";
            System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
            SerializerXml.Serialize(xmlWriter, this);
            memoryStream.Seek(0, SeekOrigin.Begin);
            streamReader = new StreamReader(memoryStream);
            return streamReader.ReadToEnd();
        }
        finally
        {
            if ((streamReader != null))
            {
                streamReader.Dispose();
            }
            if ((memoryStream != null))
            {
                memoryStream.Dispose();
            }
        }
    }
    
    /// <summary>
    /// Deserializes StatModifiers object
    /// </summary>
    /// <param name="input">string to deserialize</param>
    /// <param name="obj">Output StatModifiers object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool Deserialize(string input, out StatModifiers obj, out Exception exception)
    {
        exception = null;
        obj = default(StatModifiers);
        try
        {
            obj = Deserialize(input);
            return true;
        }
        catch (Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool Deserialize(string input, out StatModifiers obj)
    {
        Exception exception = null;
        return Deserialize(input, out obj, out exception);
    }
    
    public static StatModifiers Deserialize(string input)
    {
        StringReader stringReader = null;
        try
        {
            stringReader = new StringReader(input);
            return ((StatModifiers)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
        }
        finally
        {
            if ((stringReader != null))
            {
                stringReader.Dispose();
            }
        }
    }
    
    public static StatModifiers Deserialize(Stream s)
    {
        return ((StatModifiers)(SerializerXml.Deserialize(s)));
    }
    #endregion
    
    /// <summary>
    /// Serializes current StatModifiers object into file
    /// </summary>
    /// <param name="fileName">full path of outupt xml file</param>
    /// <param name="exception">output Exception value if failed</param>
    /// <returns>true if can serialize and save into file; otherwise, false</returns>
    public virtual bool SaveToFile(string fileName, out Exception exception)
    {
        exception = null;
        try
        {
            SaveToFile(fileName);
            return true;
        }
        catch (Exception e)
        {
            exception = e;
            return false;
        }
    }
    
    public virtual void SaveToFile(string fileName)
    {
        StreamWriter streamWriter = null;
        try
        {
            string dataString = Serialize();
            FileInfo outputFile = new FileInfo(fileName);
            streamWriter = outputFile.CreateText();
            streamWriter.WriteLine(dataString);
            streamWriter.Close();
        }
        finally
        {
            if ((streamWriter != null))
            {
                streamWriter.Dispose();
            }
        }
    }
    
    /// <summary>
    /// Deserializes xml markup from file into an StatModifiers object
    /// </summary>
    /// <param name="fileName">File to load and deserialize</param>
    /// <param name="obj">Output StatModifiers object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool LoadFromFile(string fileName, out StatModifiers obj, out Exception exception)
    {
        exception = null;
        obj = default(StatModifiers);
        try
        {
            obj = LoadFromFile(fileName);
            return true;
        }
        catch (Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool LoadFromFile(string fileName, out StatModifiers obj)
    {
        Exception exception = null;
        return LoadFromFile(fileName, out obj, out exception);
    }
    
    public static StatModifiers LoadFromFile(string fileName)
    {
        FileStream file = null;
        StreamReader sr = null;
        try
        {
            file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
            sr = new StreamReader(file);
            string dataString = sr.ReadToEnd();
            sr.Close();
            file.Close();
            return Deserialize(dataString);
        }
        finally
        {
            if ((file != null))
            {
                file.Dispose();
            }
            if ((sr != null))
            {
                sr.Dispose();
            }
        }
    }
}
}
#pragma warning restore
